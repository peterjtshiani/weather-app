{"version":3,"sources":["components/Title.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","onSubmit","this","props","getWeather","type","name","placeholder","React","Component","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","e","a","preventDefault","target","elements","value","fetch","api_call","json","data","console","log","setState","main","temp","weather","Title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTAYeA,EATA,kBACb,6BACE,wBAAIC,UAAU,yBAAd,iCACA,wBAAIA,UAAU,4BAAd,qDCQWC,E,iLATX,OACE,0BAAMC,SAAUC,KAAKC,MAAMC,YACzB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,YAC3C,oD,GALWC,IAAMC,WCmCVC,EAnCC,SAAAP,GAAK,OACnB,yBAAKJ,UAAU,gBAEZI,EAAMQ,MAAQR,EAAMS,SACnB,uBAAGb,UAAU,eAAb,aACY,0BAAMA,UAAU,iBAAhB,IAAkCI,EAAMQ,KAAxC,MAKbR,EAAMU,aACL,uBAAGd,UAAU,eAAb,eACe,IACb,0BAAMA,UAAU,iBAAhB,IAAkCI,EAAMU,YAAxC,SAKHV,EAAMW,UACL,uBAAGf,UAAU,eAAb,aACY,0BAAMA,UAAU,iBAAhB,IAAkCI,EAAMW,SAAxC,MAKbX,EAAMY,aACL,uBAAGhB,UAAU,eAAb,gBACe,0BAAMA,UAAU,iBAAhB,IAAkCI,EAAMY,cAIxDZ,EAAMa,OAAS,uBAAGjB,UAAU,iBAAiBI,EAAMa,SC3BlDC,G,MAAU,oCAmFDC,E,2MA/EbC,MAAQ,CACNN,iBAAaO,EACbT,UAAMS,EACNR,aAASQ,EACTN,cAAUM,EACVL,iBAAaK,EACbJ,WAAOI,G,EAIThB,W,sCAAa,WAAMiB,GAAN,mBAAAC,EAAA,4DACXD,EAAEE,iBACIZ,EAAOU,EAAEG,OAAOC,SAASd,KAAKe,MAFzB,SAKYC,MAAM,qDAAD,OAC2BhB,EAD3B,kBACyCM,EADzC,kBALjB,cAKLW,EALK,gBAUQA,EAASC,OAVjB,OAULC,EAVK,OAaPnB,GACFoB,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZpB,YAAaiB,EAAKI,KAAKC,KACvBxB,KAAMmB,EAAKxB,KACXQ,SAAUgB,EAAKI,KAAKpB,SACpBC,YAAae,EAAKM,QAAQ,GAAGrB,YAC7BC,MAAO,MAGT,EAAKiB,SAAS,CACZpB,iBAAaO,EACbT,UAAMS,EACNN,cAAUM,EACVL,iBAAaK,EACbJ,MAAO,+BA7BA,yC,8HAmCX,OAEE,6BACE,yBAAKjB,UAAU,OACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACb,mCAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,4BACb,kBAACsC,EAAD,OAEF,yBAAKtC,UAAU,2BACb,kBAAC,EAAD,CAAMK,WAAYF,KAAKE,aACvB,kBAAC,EAAD,CACES,YAAaX,KAAKiB,MAAMN,YACxBF,KAAMT,KAAKiB,MAAMR,KACjBG,SAAUZ,KAAKiB,MAAML,SACrBC,YAAab,KAAKiB,MAAMJ,YACxBC,MAAOd,KAAKiB,MAAMH,kB,GApEpBR,IAAMC,WCEJ6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.14b70401.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n// Creating the heading and caption phrase for the user. This caption provide a bit info of what the app is about\r\nconst Titles = () => (\r\n  <div>\r\n    <h1 className=\"title-container-title\">What's the Weather like in...</h1>\r\n    <h3 className=\"title-container-subtitle\">\r\n      found out Weather before you get disapointed !!\r\n    </h3>\r\n  </div>\r\n);\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\n// create an input holder, whihc will collect data from the user\r\nclass Form extends React.Component {\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.props.getWeather}>\r\n        <input type=\"text\" name=\"city\" placeholder=\"City...\" />\r\n        <button>Get Weather</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\n\r\n// creating the fuicntion whihc contating the required details from the Weather API\r\nconst Weather = props => (\r\n  <div className=\"weather-info\">\r\n    {/* setting up the location */}\r\n    {props.city && props.country && (\r\n      <p className=\"weather-key\">\r\n        Location: <span className=\"weather-value\"> {props.city},</span>\r\n      </p>\r\n    )}\r\n\r\n    {/* settng up the temperature */}\r\n    {props.temperature && (\r\n      <p className=\"weather-key\">\r\n        Temperature:{\" \"}\r\n        <span className=\"weather-value\"> {props.temperature}&#176;</span>\r\n      </p>\r\n    )}\r\n\r\n    {/* setting up the humidity */}\r\n    {props.humidity && (\r\n      <p className=\"weather-key\">\r\n        Humidity: <span className=\"weather-value\"> {props.humidity}%</span>\r\n      </p>\r\n    )}\r\n\r\n    {/* setting up a discription of the day */}\r\n    {props.description && (\r\n      <p className=\"weather-key\">\r\n        Description: <span className=\"weather-value\"> {props.description}</span>\r\n      </p>\r\n    )}\r\n    {/* setting up an error message */}\r\n    {props.error && <p className=\"weather-error\">{props.error}</p>}\r\n  </div>\r\n);\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport Titles from \"./components/Title\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nimport \"./App.css\";\n\n//this is my api key from https://openweathermap.org/api\nconst API_KEY = \"8b3a2dc52ce4b29ab66736202a55f268\";\n\n// declaring variable as underfine\nclass App extends React.Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n\n  // setting up a variable which get the inputed value from the user as the variable value\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.target.elements.city.value;\n\n    // fetching the API with the city name and the API Key in metric mode\n    const api_call = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${API_KEY}&units=metric`\n    );\n\n    // conlole log all the data retrieve per city name entered\n    const data = await api_call.json();\n\n    // seting a conditioning from to obtail the provided data\n    if (city) {\n      console.log(data);\n\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\"\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter a City name !\"\n      });\n    }\n  };\n\n  render() {\n    return (\n      // display the information obtain\n      <div>\n        <div className=\"App\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col\">\n                  <header />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col-xs-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    city={this.state.city}\n                    humidity={this.state.humidity}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}